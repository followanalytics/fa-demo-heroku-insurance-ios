//
//  FollowApps.h
//  FollowApps
//
//  Created by FollowApps on 07/05/12.
//  Copyright (c) 2012 FollowApps. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import <WatchConnectivity/WatchConnectivity.h>

#ifdef DEBUG
#define FADEBUG YES
#else
#define FADEBUG NO
#endif

@interface FAFollowApps : UIResponder

// _____________________________________________________
// ------------------- configuration -------------------

/*!
 Sets up the library which then handles automatically every device event: background entering, application closing, and so on.

 The developer doesn't have to do anything more than calling this line to get the library up and running for basic logging.

 If you want to send push notifications from FollowAnalytics, you need to ask the user to allow it, either by yourself or by calling `[FAFollowApps registerForPush]` after configuration.

 @param FAId Your FollowAnalytics API Key.
 @param isDebug Always use FADEBUG so that the parameter is automatically set depending on your build configuration.
 @param options Pass the launchOptions you get from `application:didFinishLaunchingWithOptions`.
 */
+ (BOOL)configureWithId:(NSString *)FAId
		   debugStateOn:(BOOL)isDebug
				options:(NSDictionary *)options;

/*!
 If you want FollowAnalytics to prompt the user to accept notifications, call this method. If you already get the authorization, no need to call this method.
 */
+ (void)registerForPush;

/*!
 Changes the maximum duration spent in background within a session. Default is 120. After this delay, the session is considered over and a new one is started when the app goes back to foreground.
 
 For instance, leaving an app to sign in using the Facebook app for sharing shouldn't count as ending and starting a new session in terms of analytics.
 
 Should your app require specific background side usage by the user, this is the parameter you'd want to fine tune.
 
 @param duration allowed number of seconds outside of the app.
 */
+ (void)setMaxBackgroundTimeWithinSession:(NSTimeInterval)duration;

/*!
 Device ID generated by FollowAnalytics, used to uniquely identify a device
 */
+ (NSUUID *)deviceUUID;


/*!
 Original Application Delegate
 */

+ (id<UIApplicationDelegate>)applicationDelegate;


// _____________________________________________________
// ------------------ logging methods ------------------

/*!
 Logs an event with details associated.

 For instance, you could log that the user went to on a product view by calling `[FAFollowApps logEventWithName:@"Product View" details:@"Product name"];`. This way you would be able to see which products are seen the most.

 Try to use a limited number of event names. Also, remember that the event name you use with the SDK can be different from the one shown on the platform (see Analytics > Settings on the platform), and that groups of events can be created on the platform, therefore helping you to classify your various events.

 @param name The name of the event.
 @param details A string or dictionary giving context about the event you're logging.
 @return true for success, false if the log couldn't be saved.
 */
+ (BOOL)logEventWithName:(NSString *)name
				 details:(id)details;

/*!
 Logs an error that occurred, with its name and some context/details.

 For instance, if you encounter an unexpected return value from your web service, you could call `[FAFollowApps logErrorWithName:@"Unexpected Webservice X value" details:@"the_value"]`.

 Like for events, the name displayed on the platform can be changed from there, et errors groups can be created.

 @param name The name of the error.
 @param details A string or dictionary giving context about the error you're logging.
 @return returns true for success, false if the log couldn't be saved.
 */
+ (BOOL)logErrorWithName:(NSString *)name
				 details:(id)details;

/*!
 Lists installed SDKs that FollowAnalytics can fetch tags from.

 @return Array containing FASDK* constant strings (defined at the bottom of this file).
 */
+ (NSArray *)detectedSDKs;

/*!
 Declares the SDKs FollowAnalytics should fetch tags from.

 Tags fetched from a source will be prefixed by 2 or 3 chars identifying it.

 You can tell the SDK to fetch whatever it detects by calling `[FAFollowApps fetchTagsFromSDKs:[FAFollowApps detectedSDKs]]`
 
 @param Array containing FASDK* constant strings describing SDKs.
 */
+ (void)fetchTagsFromSDKs:(NSArray *)SDKKeys;

// _____________________________________________________
// ------- user knowledge and attributes methods -------

/*!
 Sets the user for all further attributes and events/errors logged.

 If the user is set for the first time, previous logs will be associated to this first Id.

 There can only be one type of Id per app. Ids can be e-mail addresses, phone numbers, etc., anything that uniquely identifies the user.
 
 
 @param userId unique identifier for the user using the app.
 */
+ (void)setCurrentUserIdentifier:(NSString *)userId __attribute((deprecated(("use 'setUserId' instead"))));

/*!
 @return The currently set user indentifier.
 */
+ (NSString *)currentUserIdentifier;

/*!
 Resets the current user for all further attributes and behaviors logged.

 Doing so restarts a new session without an User Id information.
 */
+ (void)unsetCurrentUserIdentifier;

/*!
 Defines an attribute regarding the user of the app: preference, habit, any attribute.

 The attributes are associated to the currently set user identifier, or to a default user until a first user indentifier is set, which will qualify this default user.

 This methods does not behave as a Dictionary: you can add multiple attributes for a single key. For instance, you could add "likes" > "Hockey", and the "likes" > "Baseball".
 
 @param key Key for the attribute you're setting.
 @param attribute String value you want to associate to that key.
 */
+ (void)addUserAttribute:(NSString *)attribute
				  forKey:(NSString *)key __attribute((deprecated(("use 'addCustomUserAttribute' || 'addCustomUserAttributeSet' instead"))));

/*!
 Removes a previously defined attribute.
 
 To do so, you need to specify the value to remove.
 
 @param key Key to the attribute you're removing.
 @param attribute Attribute to remove.
 */
+ (void)removeUserAttribute:(NSString *)attribute
					 forKey:(NSString *)key __attribute((deprecated(("use 'removeCustomUserAttributeForKey' || 'removeCustomUserAttributeSet' instead"))));

#pragma mark - User Attributes
/*!
 Sets the user id. If called multiple times, the previous value will be overriden.
 
 @param userId String for the id of the user.
 */
+ (void)setUserId:(NSString *)userId;

/*!
 Sets the user first name. If called multiple times, the previous value will be overriden.
 If you want to remove the user first name, pass nil in parameter.
 
 @param firstName String for the first name of the user.
 */
+ (void)setUserFirstName:(NSString *)firstName;

/*!
 Sets the user last name. If called multiple times, the previous value will be overriden.
 If you want to remove the user last name, pass nil in parameter.

 @param lastName String for the last name of the user.
 */
+ (void)setUserLastName:(NSString *)lastName;

/*!
 Sets the user email. If called multiple times, the previous value will be overriden.
 If you want to remove the user email, pass nil in parameter.

 @param email String for the email of the user.
 */
+ (void)setUserEmail:(NSString *)email;

/*!
 Sets the user date of birth. If called multiple times, the previous value will be overriden.
 If you want to remove the user date of birth, pass nil in parameter.

 @param date of birth Date for the date of birth of the user.
 */
+ (void)setUserDateBirth:(NSDate *)dateBirth;


typedef NS_ENUM(NSInteger, FAGender) {
    FAGenderRemove      = 0,
    FAGenderMale        = 1,
    FAGenderFemale      = 2,
    FAGenderOther       = 3
};

/*!
 Sets the user gender. If called multiple times, the previous value will be overriden.
 If you want to remove the user gender, pass nil in parameter.

 @param gender String for the gender of the user.
 */
+ (void)setUserGender:(FAGender)gender;

/*!
 Sets the user country. If called multiple times, the previous value will be overriden.
 If you want to remove the user country, pass nil in parameter.

 @param country String for the country of the user.
 */
+ (void)setUserCountry:(NSString *)country;

/*!
 Sets the user city. If called multiple times, the previous value will be overriden.
 If you want to remove the user city, pass nil in parameter.

 @param city String for the city of the user.
 */
+ (void)setUserCity:(NSString *)city;

/*!
 Sets the user region. If called multiple times, the previous value will be overriden.
 If you want to remove the user region, pass nil in parameter.

 @param region String for the region of the user.
 */
+ (void)setUserRegion:(NSString *)region;

/*!
 Sets the user profile picture url. If called multiple times, the previous value will be overriden.
 If you want to remove the user profile picture, pass nil in parameter.

 @param url String for the profile picture url of the user.
 */
+ (void)setUserProfilePictureUrl:(NSString *)url;

typedef NS_ENUM(NSInteger, FADataType) {
    FADataTypeGeneric       = 0,
    FADataTypeDate          = 1,
    FADataTypeDateTime      = 2
};

/**
 *  Set a value of type integer for a custom User Attribute
 *
 *  @param intValue NSInteger value
 *  @param key      Custom attribute key
 */

+ (void)setInt:(NSInteger)intValue forKey:(NSString *)key;

/**
 *  Set a value of type double for a custom User Attribute
 *
 *  @param doubleValue double value
 *  @param key         Custom attribute key
 */
+ (void)setDouble:(double)doubleValue forKey:(NSString *)key;

/**
 *  Set a value of type boolean for a custom User Attribute
 *
 *  @param booleanValue boolean value
 *  @param key          Custom attribute key
 */
+ (void)setBoolean:(BOOL)booleanValue forKey:(NSString *)key;

/**
 *  Set a value of type Date for a custom User Attribute
 *
 *  @param dateValue format: 'YYYY-MM-DD'
 *  @param key       Custom attribute key
 */
+ (void)setDate:(NSDate *)dateValue forKey:(NSString *)key;

/**
 *  Set a value of type DateTime for a custom User Attribute
 *
 *  @param dateValue format
 *  @param key       Custom attribute key
 */
+ (void)setDateTime:(NSDate *)dateValue forKey:(NSString *)key;

/**
 *  Set a value of type NSString for a custom User Attribute
 *
 *  @param stringValue format
 *  @param key       Custom attribute key
 */
+ (void)setString:(NSString *)stringValue forKey:(NSString *)key;

/*!
 Defines an attribute regarding the user of the app: preference, habit, any attribute.
 Type accepted: NSString, NSDate
 The attributes are associated to the currently set user identifier, or to a default user until a first user indentifier is set, which will qualify this default user.
 
 @param key Key for the attribute you're setting.
 @param attribute id value you want to associate to that key.
 
 This method is deprecated and will be removed in a future release.
 Please use the corresponding method : setString, setBoolean, setInt, setDouble, setDate, setDateTime instead.
 @deprecated

 */
+ (void)addCustomUserAttribute:(id)attribute forKey:(NSString *)key withDataType:(FADataType)dataType __attribute((deprecated(("use setString, setBoolean, setInt, setDouble, setDate, setDateTime instead"))));


/*!
 Defines an attribute regarding the user of the app: preference, habit, any attribute.
 The attributes are associated to the currently set user identifier, or to a default user until a first user indentifier is set, which will qualify this default user.
 If you have only one attribute to add in a set, pass an NSset with one element.
 Type accepted: NSString

 @param key Key for the attribute you're setting.
 @param attribute Set value you want to associate to that key.
 */
+ (void)addCustomUserAttributeSet:(NSSet *)attributeSet forKey:(NSString *)key;

/*!
 Remove a custom user attribute from a Set.
 Type accepted: NSString

 @param key Key for the attribute you're setting.
 @param attribute id value you want to remove to that key.
 */
+ (void)removeCustomUserAttributeSet:(NSString *)attribute forKey:(NSString *)key;

/*!
 Remove a custom user attribute.
 @param key Key for the attribute you're removing.
 */
+ (void)removeCustomUserAttributeForKey:(NSString *)key;

/*!
 Delete a set of custom user attributes.
 
 @param key Key for the set attributes you're deleting.
 */
+ (void)deleteCustomUserAttributeSetForKey:(NSString *)key;


// --------------------- Rich Campaigns ---------------------

/*!
 Use this method to pause Rich Campaign display. Used when you don't want InApp campaigns to be shown over the current screen.
 This method is deprecated, please use `pauseCampaignDisplay` instead.
 @deprecated
 */
+ (void)pauseRichCampaignDisplay __attribute__((deprecated));

/*!
 Use this method to resume Rich Campaign display. Used when you're able to display Rich Campaigns on current or upcoming screens.
 This method is deprecated, please use `resumeCampaign` instead.
 @deprecated
 */
+ (void)resumeRichCampaignDisplay __attribute__((deprecated));


/*!
 Use this method to pause Rich Campaign display. Used when you don't want InApp campaigns to be shown over the current screen.
 */
+ (void)pauseCampaignDisplay;

/*!
 Use this method to resume Rich Campaign display. Used when you're able to display Rich Campaigns on current or upcoming screens.
 */
+ (void)resumeCampaignDisplay;

/*!
 *  Use this method to fetch the custom parameters from the latest Push Notification message received by the system
 */
+ (NSDictionary *)lastPushCampaignParams;

@end


// _____________________________________________________
// --------------- FAFollowApps Delegate ---------------

/*!
 Delegate to receive data and events from FollowAnalytics.
 
 @warning The delegate has to be your AppDelegate. Add the protocol on your appDelegate interface.
 */
@protocol FAFollowAppsDelegate <UIApplicationDelegate>

@optional

/*!
 Gives your app a dictionary of parameters to handle, following a launch from notification or campaign action, and allows you to receive interactive notification action.

 actionIdentifier, actionTitle and completionHandler are nil if the associated campaign or push notification is not an interactive push notification.

 @warning The completionHandler comes from the default interactive notification handling methods. Make sure you call it if it is not nil as it won't be called by FA if passed to you.
 
 @param customParameters Deep-linking parameters received from FollowAnalytics.
 @param actionIdentifier Comes from an interactive notification.
 @param actionTitle Comes from an interactive notification.
 @param completionHandler Comes from an interactive notification. Call it if it is not nil.
 */
- (void)followAppsShouldHandleParameters:(NSDictionary *)customParameters
                        actionIdentifier:(NSString *)actionIdentifier
                             actionTitle:(NSString *)actionTitle
                       completionHandler:(void (^)())completionHandler;

/*!
 Allows the user to handle themselves a rich campaign and its parameters.
 
 @param url the URL associated to the rich campaign.
 @param urlTitle title associated to the URL.
 @param params Rich campaign parameters. Could be used for deeplinkng, knowing how or where to show the URL, and so on.
 */
- (void)followAppsShouldHandleWebViewUrl:(NSURL *)url
							   withTitle:(NSString *)urlTitle
						customParameters:(NSDictionary *)params;


/*!
 Allows the user to handle themselves a rich campaign and its parameters.
 
 This method is deprecated, please use `followAppsShouldHandleWebViewUrl:withTitle:customParameters:` instead.
 
 @deprecated
 */
- (void)followAppsShouldHandleWebViewUrl:(NSURL *)url
                               withTitle:(NSString *)webviewTitle __attribute__((deprecated));

@end


// _____________________________________________________
// --------------------- FAWebView ---------------------

/*!
 Use this web view if you want to be able to tag events and errors directly from Javascript (using FAWebView.js)
*/
@interface FAWebView : UIWebView
@end


// _____________________________________________________
// ----------------- Adaptive SDK keys -----------------

UIKIT_EXTERN NSString *const FASDKLocalyticsKey;
UIKIT_EXTERN NSString *const FASDKUrbanAirshipKey;
UIKIT_EXTERN NSString *const FASDKMixpanelKey;
UIKIT_EXTERN NSString *const FASDKGoogleAnalyticsKey;
UIKIT_EXTERN NSString *const FASDKTuneKey;
UIKIT_EXTERN NSString *const FASDKSegmentKey;
UIKIT_EXTERN NSString *const TUSessionId;
UIKIT_EXTERN NSString *const TUUserId;

